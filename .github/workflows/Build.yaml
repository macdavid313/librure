name: Build and publish librure

on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: i686-unknown-linux-gnu

          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu

          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu

          - os: ubuntu-20.04
            target: i686-unknown-freebsd

          - os: ubuntu-20.04
            target: x86_64-unknown-freebsd

          - os: ubuntu-20.04
            target: sparcv9-sun-solaris

          - os: ubuntu-20.04
            target: x86_64-sun-solaris

          - os: macos-12
            target: aarch64-apple-darwin

          - os: macos-12
            target: x86_64-apple-darwin

          - os: windows-2022
            target: i686-pc-windows-msvc

          - os: windows-2022
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-20.04'
        uses: docker/setup-qemu-action@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install cross
        if: matrix.os == 'ubuntu-20.04'
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: https://github.com/cross-rs/cross
          use-tool-cache: true

      - name: Set up regexp repo
        run: |
          curl -L https://github.com/rust-lang/regex/archive/f871a8e.tar.gz | tar xz
          mv regex-* regex
          cp Cross.toml regex/
          cp Cross.toml regex/regex-capi/
        shell: bash

      - name: Build librure shared library
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            CARGO=cross
          else
            CARGO=cargo
          fi
          rustup target add ${{ matrix.target }}
          ${CARGO} build --release --target ${{ matrix.target }}
        working-directory: regex/regex-capi
        shell: bash

      - name: Make artifacts
        run: |
          mkdir ${{ matrix.target }}
          case "$RUNNER_OS" in
            "Linux")
              SHLIB=librure.so
              ;;
            "macOS")
              SHLIB=librure.dylib
              ;;
            "Windows")
              SHLIB=rure.dll
              ;;
          esac
          cp regex/target/${{ matrix.target }}/release/${SHLIB} ${{ matrix.target }}/
        shell: bash

      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: librure

      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: librure
          path: librure
